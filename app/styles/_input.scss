@use "./colors";
@use "./dimensions";
@use "./typography";
@use "./helpers/rem";
@use "sass:map";

$fieldHeight: rem.toRem(map.get(dimensions.$sizes, s40));
$invalidColor: rgba(colors.$colorRedHeat, 0.15);

@mixin baseInputStyles(
  $height: $fieldHeight,
  $backgroundColor: colors.$colorGreyDark,
  $border: 1px solid colors.$colorGreenGrass
) {
  appearance: none;
  background-color: $backgroundColor;
  border: $border;
  color: colors.$colorWhiteGhost;
  display: block;
  font-size: rem.toRem(map.get(typography.$fontSizes, medium));
  height: $height;
  margin: rem.toRem(map.get(dimensions.$sizes, s2)) auto 0;
  max-width: rem.toRem(dimensions.$globalInputMaxWidth);
  padding: rem.toRem(map.get(dimensions.$sizes, s8));
  width: 100%;

  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    -webkit-text-fill-color: colors.$colorWhiteGhost;
    -webkit-box-shadow: 0 0 0 $height $backgroundColor inset;
  }

  &:user-invalid {
    background-color: $invalidColor;
  }

  &StateInvalid {
    background-color: $invalidColor;

    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus {
      -webkit-text-fill-color: colors.$colorWhiteGhost;
      -webkit-box-shadow: 0 0 0 $height $invalidColor inset;
    }
  }
}

@mixin labelledStyles {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin: 0 auto dimensions.getSize(s8);
  max-width: rem.toRem(dimensions.$globalInputMaxWidth);
  width: 100%;
}
