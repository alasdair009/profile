// Stringifies SCSS variables into JSON for easier JavaScript importing/parsing.
@function json-stringify($var) {
  $var-type: type-of($var);
  $encode-func-name: "_encode-#{$var-type}";

  @if (function-exists($encode-func-name)) {
    $encode-func: get-function($encode-func-name);

    @return call($encode-func, $var);
  }

  @return $var; // strings and booleans don't need to be modified
}

@function stringify($var) {
  @return '"#{$var}"';
}

@function _encode-string($string) {
  @return stringify($string);
}

@function _encode-number($number) {
  @if (unitless($number)) {
    @return $number;
  }

  @return stringify($number);
}

@function _encode-null($string) {
  @return "null";
}

@function _encode-color($color) {
  @return stringify($color);
}

@function _encode-list($list) {
  @return _encode-iterable($list);
}

@function _encode-map($map) {
  @return _encode-iterable($map);
}

@function _encode-iterable($iterable) {
  $is-list: type-of($iterable) == "list";
  $is-map: type-of($iterable) == "map";

  $str: "";
  $opening-bracket: if($is-list, "[", "{");
  $closing-bracket: if($is-list, "]", "}");

  @each $key, $value in $iterable {
    $entry-string: "";

    @if ($is-list) {
      $entry-string: json-stringify($key);
    } @else if ($is-map) {
      $entry-string: stringify($key) + ": " + json-stringify($value);
    }

    $str: $str + ", " + $entry-string;
  }

  $str: str-slice($str, 3); // remove leading ', ' from ', entry1, entry2'

  @return $opening-bracket + $str + $closing-bracket;
}
